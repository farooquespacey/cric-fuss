logging.level.org.springframework=INFO
logging.level.com.befaruq=INFO
logging.level.root=ERROR
logging.pattern.console=%-5level %logger{36} - %msg%n

## Testing only
#spring.datasource.hikari.connectionTimeout=20000
#spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
#spring.datasource.url=jdbc:postgresql://192.168.214.192:5432/cricsdb
#spring.datasource.username=postgres
#spring.datasource.password=postgres

spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

## Kafka
spring.kafka.bootstrap-servers=192.168.214.192:9092
spring.kafka.consumer.group-id=my-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.producer.bootstrap-servers=192.168.214.192:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# create and drop table, good for testing, production set to none or comment it
spring.jpa.hibernate.ddl-auto=${SPRING_DATASOURCE_DDL_AUTO}

# enable query logging
# spring.jpa.show-sql=true